#include <bits/stdc++.h>
using namespace std;

int *fa, *sz, N;
int Find(int x) {
    if (fa[x] == x) return x;
    return fa[x] = Find(fa[x]);
}

void Union(int x, int y) {
    x = Find(x), y = Find(y);
    if (x != y) {
        if (y == N) swap(x, y);
        fa[y] = x;
        sz[x] += sz[y];
    }
}
vector<int> hitBricks(vector<vector<int>>& grid, vector<vector<int>>& hits) {
    vector<int> res(hits.size());
    int H = grid.size(), W = grid[0].size();
    N = H * W;
    int _fa[N + 1], _sz[N + 1];
    for (int i = 0; i <= N; ++i) _fa[i] = i, _sz[i] = 1;
    _sz[N] = 0;
    fa = _fa, sz = _sz;
    for (auto&& h: hits) {
        --grid[h[0]][h[1]];
    }
    for (int x = 0; x != H; ++x) {
        for (int y = 0; y != W; ++y) {
            if (grid[x][y] != 1) continue;
            int now = x * W + y;
            if (x == 0) Union(now, N);
            if (x + 1 != H && grid[x + 1][y] == 1) Union(now, now + W);
            if (y + 1 != W && grid[x][y + 1] == 1) Union(now, now + 1);
        }
    }
    for (auto i = hits.size() - 1; i != -1; --i) {
        int x = hits[i][0], y = hits[i][1];
        ++grid[x][y];
        if (grid[x][y] == 1) {
            int oldSize = sz[N], now = x * W + y;
            if (x == 0) Union(now, N);
            if (x - 1 != -1 && grid[x - 1][y] == 1) Union(now, now - W);
            if (y - 1 != -1 && grid[x][y - 1] == 1) Union(now, now - 1);
            if (x + 1 != H && grid[x + 1][y] == 1) Union(now, now + W);
            if (y + 1 != W && grid[x][y + 1] == 1) Union(now, now + 1);
            res[i] = max(0, sz[N] - oldSize - 1);
        } else {
            res[i] = 0;
        }
    }
    return res;
}
int main()
{
    vector<vector<int>> grid{{1,0,0,0,1,0,0,1,0,1},{1,0,0,1,1,1,1,0,1,1},{1,1,0,1,0,1,0,1,1,0},{0,1,0,1,1,0,0,0,1,1},{0,1,1,0,1,0,1,0,0,1},{1,1,1,1,0,1,1,1,0,1},{0,1,1,0,0,1,0,1,1,1},{0,0,0,0,0,1,0,0,0,1},{0,1,1,1,1,1,1,1,0,1},{0,1,0,0,0,0,1,0,1,1}};
    vector<vector<int>> hits{{3,4},{3,3},{5,1},{7,0},{7,5},{2,0},{6,0},{1,5},{7,3},{2,7},{3,5},{0,1},{7,1},{5,8},{2,8},{8,5},{2,5},{2,4},{1,2},{1,1},{7,7},{0,0},{4,0},{3,0},{0,7},{3,8},{0,3},{5,5},{4,2},{8,8},{8,0},{6,7}};

    // vector<vector<int>> grid{{1, 0, 0, 0}, {1, 1, 1, 0}};
    // vector<vector<int>> hits{{1, 0}};

    // vector<vector<int>> grid{{1, 0, 0, 0}, {1, 1, 0, 0}};
    // vector<vector<int>> hits{{1, 1}, {1, 0}};

    vector<int> res = hitBricks(grid, hits);
    cout << "[";
    for (int i = 0; i != res.size(); ++i) {
        cout << res[i] << ",]"[i + 1 == res.size()] << " \n"[i + 1 == res.size()];
    }
    cout << endl;
    return 0;
}
/*
Input: 
grid = [[1,0,0,0],[1,1,1,0]]
hits = [[1,0]]
Output: [2]

Input: 
grid = [[1,0,0,0],[1,1,0,0]]
hits = [[1,1],[1,0]]
Output: [0,0]

{{1,0,0,0,1,0,0,1,0,1},{1,0,0,1,1,1,1,0,1,1},{1,1,0,1,0,1,0,1,1,0},{0,1,0,1,1,0,0,0,1,1},{0,1,1,0,1,0,1,0,0,1},{1,1,1,1,0,1,1,1,0,1},{0,1,1,0,0,1,0,1,1,1},{0,0,0,0,0,1,0,0,0,1},{0,1,1,1,1,1,1,1,0,1},{0,1,0,0,0,0,1,0,1,1}}
{{3,4},{3,3},{5,1},{7,0},{7,5},{2,0},{6,0},{1,5},{7,3},{2,7},{3,5},{0,1},{7,1},{5,8},{2,8},{8,5},{2,5},{2,4},{1,2},{1,1},{7,7},{0,0},{4,0},{3,0},{0,7},{3,8},{0,3},{5,5},{4,2},{8,8},{8,0},{6,7}}


[[1,0,0,0,1,0,0,1,0,1],[1,0,0,1,1,1,1,0,1,1],[1,1,0,1,0,1,0,1,1,0],[0,1,0,1,1,0,0,0,1,1],[0,1,1,0,1,0,1,0,0,1],[1,1,1,1,0,1,1,1,0,1],[0,1,1,0,0,1,0,1,1,1],[0,0,0,0,0,1,0,0,0,1],[0,1,1,1,1,1,1,1,0,1],[0,1,0,0,0,0,1,0,1,1]]
[[1,9],[6,6],[3,7],[5,4],[2,8],[3,2],[3,5],[4,9],[0,4],[5,4],[3,7],[8,2],[9,7],[2,1],[5,4],[1,8],[2,3],[2,3],[2,6],[4,0],[9,0],[1,2],[6,2],[0,8],[1,8],[5,6],[9,7],[4,5],[2,2],[7,4],[1,9],[1,3],[7,6],[9,1],[1,9],[5,4],[7,7],[6,5],[6,9],[7,5]]
[[4,3],[3,8],[5,4],[3,7],[4,0],[2,7],[3,0],[4,7],[2,6],[5,2],[3,3],[6,5],[7,0],[7,1],[5,6],[7,5],[0,8],[6,7],[4,2],[5,1],[4,8],[3,6],[1,4],[2,0],[5,8],[7,8],[6,6],[8,8],[0,1],[6,3],[9,6],[8,6],[2,1]]

[[1,0,0,0,1,0,0,1,0,1],[1,0,0,1,1,1,1,0,1,1],[1,1,0,1,0,1,0,1,1,0],[0,1,0,1,1,0,0,0,1,1],[0,1,1,0,1,0,1,0,0,1],[1,1,1,1,0,1,1,1,0,1],[0,1,1,0,0,1,0,1,1,1],[0,0,0,0,0,1,0,0,0,1],[0,1,1,1,1,1,1,1,0,1],[0,1,0,0,0,0,1,0,1,1]]
[[3,4],[3,3],[5,1],[7,0],[7,5],[2,0],[6,0],[1,5],[7,3],[2,7],[3,5],[0,1],[7,1],[5,8],[2,8],[8,5],[2,5],[2,4],[1,2],[1,1],[7,7],[0,0],[4,0],[3,0],[0,7],[3,8],[0,3],[5,5],[4,2],[8,8],[8,0],[6,7]]
[1,0,1,0,9,8,0,2,0,0,0,0,0,0,16,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0]

[[1,0,0,0,1,0,0,1,0,1],      [1,0,0,0,1,0,0,1,0,1]  [1,0,0,0,1,0,0,1,0,1]
 [1,0,0,1,1,1,1,0,1,1],      [1,0,0,1,1,1,1,0,1,1]  [1,0,0,1,1,1,1,0,1,1]
 [1,1,0,1,0,1,0,1,1,0],      [1,1,0,1,0,1,0,1,1,0]  [1,1,0,1,0,1,0,1,1,0]
 [0,1,0,1,1,0,0,0,1,1],      [0,1,0,3,2,0,0,0,1,1]  [0,1,0,1,1,0,0,0,1,1]
 [0,1,1,0,1,0,1,0,0,1],      [0,1,1,0,@,0,1,0,0,1]  [0,1,1,0,1,0,1,0,0,1]
 [1,1,1,1,0,1,1,1,0,1],      [$,4,1,1,0,1,1,1,0,1]  [1,1,1,1,0,1,1,1,0,1]
 [0,1,1,0,0,1,0,1,1,1],      [0,1,1,0,0,1,0,1,1,1]  [0,1,1,0,0,1,0,1,1,1]
 [0,0,0,0,0,1,0,0,0,1],      [0,0,0,0,0,1,0,0,0,1]  [0,0,0,0,0,1,0,0,0,1]
 [0,1,1,1,1,1,1,1,0,1],      [0,1,1,1,1,1,1,1,0,1]  [0,1,1,1,1,1,1,1,0,1]
 [0,1,0,0,0,0,1,0,1,1]]      [0,1,0,0,0,0,1,0,1,1]  [0,1,0,0,0,0,1,0,1,1]

*/